generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum orderStatus {
  sorting
  shipping
  delivered
}

model users {
  id       String   @id @default(uuid()) @db.Uuid
  username String   @unique @db.VarChar(120)
  fullName String   @db.VarChar(120)
  email    String   @unique @db.VarChar(120)
  password String   @db.VarChar(120)
  admin    Boolean? @default(false)
  orders   orders[]
  address  address?
}

model orders {
  id             String           @id @default(uuid()) @db.Uuid
  user           users            @relation(fields: [username], references: [username], onDelete: Cascade)
  username       String
  address        String           @db.VarChar(263)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  status         orderStatus      @default(sorting)
  productsOrders productsOrders[]
  priceTotal     Int              @db.Integer()
}

model address {
  id         String  @id @default(uuid()) @db.Uuid
  cep        String  @db.VarChar(9)
  state      String  @db.VarChar(19)
  city       String  @db.VarChar(30)
  street     String  @db.VarChar(50)
  number     String  @db.VarChar(30)
  complement String? @db.VarChar(120)
  user       users   @relation(fields: [username], references: [username], onDelete: Cascade)
  username   String  @unique
}

model products {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @db.VarChar(50)
  stock          Int              @db.Integer()
  price          Int              @db.Integer()
  productsOrders productsOrders[]
}

model productsOrders {
  id        String   @id @default(uuid()) @db.Uuid
  product   products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.Uuid()
  order     orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String   @db.Uuid()
  quantity  Int
  price     Int
}
